@using TreeCrud.App.Services
@using System.Linq
@using System.Collections.Generic
@using BlazorTreeControl
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper  

@page "/tree"
@page "/tree/{par_SelectedId}"
@inject TreeDataService TreeService

<h1>Sample Tree</h1>

<p>Tree</p>

@if (uiTree.uiNodes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text" id="basic-addon1">Selected Item</span>
        </div>
        <input type="text" class="form-control" 
            aria-label="SelectedText" aria-describedby="basic-addon1" 
            bind=@selectedNode.Text />
    </div>
    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text" id="basic-addon2">Action</span>
        </div>
        <input type="text" class="form-control" 
            aria-label="ActionText" aria-describedby="basic-addon2" 
            value="@someLogText" />
    </div>

    <UITreeComponent SourceData=@uiTree
                     SelectChangeDelegate=@OnSelectionChanged
                     LazyLoadNodesAsyncDelegate=@LoadNodes
                     CollapseAsyncDelegate=@OnCollapse
                     ExpandAsyncDelegate=@OnExpand
                     TriggerActionAsyncDelegate=@OnAction>
    </UITreeComponent>  

}

@functions {

    [Parameter]
    private string par_SelectedId { get; set; } = "";

    UITree uiTree = new UITree();
    private UITreeNode selectedNode {get; set;} = new UITreeNode();
    private string someLogText;

    private async Task<bool> OnExpand(int Id)
    {
        System.Console.WriteLine("Expanded " + Id);
        return await Task.FromResult(true);
    }

    private async Task<bool> OnCollapse(int Id)
    {
        System.Console.WriteLine("Un Expanded " + Id) ;
        return await Task.FromResult(true);
    }

    private async Task OnAction(int Id, string actionName)
    {
        await Task.Run(() =>
        {
            someLogText = $"Trigger {actionName} on {Id}";
            System.Console.WriteLine($"Han executat: {someLogText}");

            if (actionName == "Nova unitat")
            {
                System.Console.WriteLine("add unitat " + Id);
                UriHelper.NavigateTo($"/AddUnitat/{Id}");
            }
            else
            {
                StateHasChanged();
            }
        });
    }

    private void OnSelectionChanged(UIMouseEventArgs e, UITreeNode node ) {
        if (node != null ){
            selectedNode = node;
        } else {
            selectedNode = new UITreeNode();
        }
        System.Console.WriteLine("Selected " + selectedNode.Text  + " Total nodes " + uiTree.uiNodes.Count()) ;
        StateHasChanged();
    }

    protected override async Task OnInitAsync()
    {
        int IdSelectedNode;
        if (!string.IsNullOrEmpty(par_SelectedId) && int.TryParse( par_SelectedId, out IdSelectedNode ) ) {
            uiTree.uiNodes = await LoadNodesTo(IdSelectedNode);
            selectedNode = uiTree.uiNodes.Where(x=> x.Id==IdSelectedNode).Select(x=>x).FirstOrDefault();
        } else {
            uiTree.uiNodes = await LoadNodes();
        }
        uiTree.ReArrange( );
    }

    private async Task<List<UITreeNode>> LoadNodes(int? ParentId = null)
    {
        //Transform 'database' data to 'UI' data
        List<UITreeNodeAction> RandomActions = new List<UITreeNodeAction>() {
                  new UITreeNodeAction { Name = "Refresh", OpenIconic = "oi oi-reload" },
                  new UITreeNodeAction { Name = "Nova unitat", OpenIconic = "oi oi-add" },
                  new UITreeNodeAction { Name = "Edit", OpenIconic = "oi oi-pencil",    IsEsabled = false }
        };

        //Load tree from 'database'
        TreeNode[] newNodes = await TreeService.GetNodesAsync(ParentId);

        List<UITreeNode> uiNewNodes = newNodes
                                      .Select( x=>new UITreeNode { ParentId=x.ParentId, 
                                                                   Id=x.Id, Text=x.Label,
                                                                   Actions = RandomActions  } )
                                      .ToList();
        return uiNewNodes;
    }

    private async Task<List<UITreeNode>> LoadNodesTo(int Id)
    {
        //Transform 'database' data to 'UI' data
        List<UITreeNodeAction> RandomActions = new List<UITreeNodeAction>() {
                  new UITreeNodeAction { Name = "Refresh", OpenIconic = "oi oi-reload" },
                  new UITreeNodeAction { Name = "Nova unitat", OpenIconic = "oi oi-add" },
                  new UITreeNodeAction { Name = "Edit", OpenIconic = "oi oi-pencil",    IsEsabled = false }
            };

        //Load tree from 'database'
        TreeNode[] newNodes = await TreeService.GetNodesToAsync(Id);
        List<UITreeNode> uiNewNodes = new List<UITreeNode>();
        foreach( TreeNode t in newNodes ) {
            List<UITreeNode> borthers = await LoadNodes(t.ParentId);
            borthers = borthers.Where(x=>x.Id != t.Id ).ToList();
            uiNewNodes = uiNewNodes.Concat( borthers ).ToList();
        }
        List<UITreeNode> uiNewNodesPath = newNodes
                                      .Select( x=>new UITreeNode { ParentId=x.ParentId, 
                                                                   Id=x.Id, Text=x.Label,
                                                                   IsExpanded=(x.Id!=Id),
                                                                   IsSelected=(x.Id==Id),
                                                                   Actions = RandomActions  } )
                                      .ToList();

        uiNewNodes = uiNewNodes.Concat(uiNewNodesPath).ToList();
        return uiNewNodes;
    }

}